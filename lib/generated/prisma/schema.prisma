// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../lib/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                 String              @id @default(uuid())
  name               String?
  username           String?             @unique // Index for unique username lookup
  email              String?             @unique
  emailVerified      DateTime?
  image              String?
  cover              String?
  phoneNumber        String?
  bio                String?
  website            String?
  address            String?
  gender             Gender?
  relationshipStatus RelationshipStatus?
  birthDate          DateTime?
  hashedPassword     String?
  password           String?
  createdAt          DateTime            @default(now())
  updatedAt          DateTime            @updatedAt
  sessions           Session[]

  accounts              Account[]
  posts                 Post[]
  commentLikes          CommentLike[]
  replyComment          ReplyComment[]
  likeReplyComment      LikeReplyComment[]
  comments              Comment[]
  likePosts             LikePost[]
  activities            Activity[]         @relation("activity")
  activityNotifications Activity[]         @relation("activityNotifications")
  sentNotifications     Notification[]     @relation("NotificationFromUser")
  followers             Follow[]           @relation("following")
  following             Follow[]           @relation("follower")

  notifications Notification[] @relation("UserNotifications")

  // Composite indexes for common query patterns
  @@index([createdAt]) // For sorting users by join date
  @@index([username, email]) // For user search/lookup
}

model Account {
  id                String  @id @default(uuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId]) // For finding user accounts
}

model Session {
  id           String   @id @default(uuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId]) // For user session lookup
  @@index([expires]) // For session cleanup queries
}

model VerificationToken {
  id         String   @id @default(uuid())
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
}

model Post {
  id           String         @id @default(uuid())
  // name          String
  content      String
  selectedFile SelectedFile[]

  comment   Comment[]
  likePost  LikePost[]
  // bookmark      Bookmark[]
  // sharedPost    SharePost[]
  user      User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt

  notifications Notification[]

  // Critical indexes for social media queries
  @@index([userId]) // For user's posts
  @@index([createdAt]) // For timeline/feed sorting
  @@index([userId, createdAt]) // For user timeline (most common query)
  @@index([updatedAt]) // For recently updated posts
}

model LikePost {
  id     String @id @default(uuid())
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  postId String
  post   Post   @relation(fields: [postId], references: [id], onDelete: Cascade)

  @@unique([userId, postId]) // Prevent duplicate likes
  @@index([postId]) // For counting post likes
  @@index([userId]) // For user's liked posts
}

model SelectedFile {
  id     String  @id @default(uuid())
  url    String
  post   Post?   @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId String?
  key    String

  @@index([postId]) // For loading post files
  @@index([key]) // For file management operations
}

model Comment {
  id        String   @id @default(cuid())
  comment   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  isEdited     Boolean?
  commentLike  CommentLike[]
  replyComment ReplyComment[]

  postId String
  post   Post   @relation(fields: [postId], references: [id], onDelete: Cascade)
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  notifications Notification[]

  // Essential indexes for comment operations
  @@index([postId]) // For loading post comments
  @@index([userId]) // For user's comments
  @@index([postId, createdAt]) // For comment threading/sorting
  @@index([createdAt]) // For recent comments
}

model CommentLike {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  commentId String
  comment   Comment  @relation(fields: [commentId], references: [id], onDelete: Cascade)

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, commentId])
}

model ReplyComment {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  content   String
  isEdited  Boolean?

  commentId        String
  comment          Comment            @relation(fields: [commentId], references: [id], onDelete: Cascade)
  likeReplyComment LikeReplyComment[]

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  notifications Notification[]

  @@index([commentId]) // For loading comment replies
  @@index([userId]) // For user's replies
  @@index([commentId, createdAt]) // For reply threading/sorting
}

model LikeReplyComment {
  id        String       @id @default(cuid())
  createdAt DateTime     @default(now())
  replyId   String
  reply     ReplyComment @relation(fields: [replyId], references: [id], onDelete: Cascade)

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, replyId])
}

model Activity {
  id         String       @id @default(cuid())
  createdAt  DateTime     @default(now())
  targetId   String
  targetUser User         @relation("activityNotifications", fields: [targetId], references: [id], onDelete: Cascade)
  type       Activitytype

  content      String
  contentId    String
  sourceUserId String
  sourceUser   User   @relation("activity", fields: [sourceUserId], references: [id], onDelete: Cascade)

  // Activity feed indexes
  @@index([targetId]) // For user activity feed
  @@index([sourceUserId]) // For activities by user
  @@index([targetId, createdAt]) // For chronological activity feed
  @@index([type, targetId]) // For filtering activity by type
  @@index([contentId]) // For finding activities related to specific content
}

model Follow {
  id          String @id @default(cuid())
  follower    User   @relation("follower", fields: [followerId], references: [id], onDelete: Cascade)
  followerId  String
  following   User   @relation("following", fields: [followingId], references: [id], onDelete: Cascade)
  followingId String

  @@unique([followerId, followingId])
}

model Notification {
  id         String           @id @default(cuid())
  userId     String
  user       User             @relation("UserNotifications", fields: [userId], references: [id], onDelete: Cascade)
  type       NotificationType
  message    String?
  isRead     Boolean          @default(false)
  createdAt  DateTime         @default(now())
  fromUserId String?
  fromUser   User?            @relation("NotificationFromUser", fields: [fromUserId], references: [id])
  postId     String?
  post       Post?            @relation(fields: [postId], references: [id])
  commentId  String?
  comment    Comment?         @relation(fields: [commentId], references: [id])
  replyId    String?
  reply      ReplyComment?    @relation(fields: [replyId], references: [id])

  // Notification system indexes
  @@index([userId]) // For user notifications
  @@index([userId, isRead]) // For unread notifications
  @@index([userId, createdAt]) // For chronological notifications
  @@index([type, userId]) // For filtering notifications by type
  @@index([fromUserId]) // For notifications from specific users
}

enum NotificationType {
  FOLLOW
  POST_LIKE
  COMMENT
  REPLY
  COMMENT_LIKE
  REPLY_LIKE
}

enum Activitytype {
  POST_LIKE
  FOLLOW_USER
  CREATE_COMMENT
  COMMENT_LIKE
  CREATE_REPLY
  REPLY_LIKE
}

enum Gender {
  FEMALE
  MALE
}

enum RelationshipStatus {
  SINGLE
  IN_A_RELATIONSHIP
  ENGAGED
  MARRIED
}
