// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "mongodb"
    // NOTE: When using postgresql, mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
}

model Example {
    id        String   @id @default(cuid()) @map("_id")
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid()) @map("_id")
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? // @db.Text
    access_token      String? // @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? // @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid()) @map("_id")
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String    @id @default(cuid()) @map("_id")
    name          String?
    email         String?   @unique
    password      String
    emailVerified DateTime?
    coverPhoto    String?
    image         String?
    accounts      Account[]
    sessions      Session[]
    likes         Likes[]
    post          Post[]
    comment       Comment[]
    postLike      Postlike[]
    reply         ReplyComment[]
    createdAt     DateTime @default(now())
    updatedAt     DateTime @updatedAt
}

model Post {
    id            String  @id @default(cuid()) @map("_id")
    name          String
    message       String
    selectedFile  SelectedFile[]
    likes         Likes[]
    comment       Comment[]
    postLike      Postlike[]
    user          User?    @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId        String?
    createdAt     DateTime @default(now())
    updatedAt     DateTime @updatedAt
}

model Likes {
    id            String   @id @default(cuid()) @map("_id")
    user          User?    @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId        String?
    post          Post?    @relation(fields: [postId], references: [id])
    postId        String?
}

model Comment {
    id            String   @id @default(cuid()) @map("_id")
    comment       String
    user          User?    @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId        String?
    post          Post?    @relation(fields: [postId], references: [id], onDelete: Cascade)
    postId        String?
    createdAt     DateTime @default(now())
    updatedAt     DateTime @updatedAt
    reply         ReplyComment[]
}

model ReplyComment {
    id           String @id @default(cuid()) @map("_id")
    comment      String
    createdAt    DateTime @default(now())
    updatedAt    DateTime @updatedAt
    replyTo      Comment? @relation(fields: [replyToId], references: [id], onDelete: Cascade)
    replyToId    String?
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId       String
}

model Postlike {
    id           String @id @default(cuid()) @map("_id")
    userId       String?
    user         User?     @relation(fields: [userId], references: [id], onDelete: Cascade)
    postId       String?
    post         Post?   @relation(fields: [postId], references: [id], onDelete: Cascade)
}

model VerificationToken {
    id            String    @id @default(cuid()) @map("_id")
    identifier    String
    token         String   @unique
    expires       DateTime

    @@unique([identifier, token])
}


model SelectedFile {
    id          String @id @default(cuid()) @map("_id")
    url         String
    fallbackUrl String
    post        Post?    @relation(fields: [postId], references: [id], onDelete: Cascade)
    postId      String?
    width       Int
    height      Int
} 