// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}


model User {
  id              String @id @default(uuid())
  name            String?
  email           String? @unique
  emailVerified   DateTime?
  image           String?
  hashedPassword  String?
  password        String?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  sessions        Session[]
  conversationIds String[]

  accounts        Account[]
  posts           Post[]
  likePosts       LikePost[]
}

model Account {
  id                String  @id @default(uuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}


model Session {
  id           String   @id @default(uuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  id         String   @id @default(uuid())
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
}

model Post {
  id            String  @id @default(uuid())
  // name          String
  content       String
  selectedFile  SelectedFile[]
  // likes         Likes[]
  // comment       Comment[]
  likePost      LikePost[]
  // bookmark      Bookmark[]
  // sharedPost    SharePost[]
  user          User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId        String
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

model LikePost {
  id            String  @id @default(uuid())
  userId        String
  user          User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  postId        String
  post          Post    @relation(fields: [postId], references: [id], onDelete: Cascade)
}

model SelectedFile {
  id            String  @id @default(uuid())
  url           String
  post          Post?    @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId        String?
}

